** Study points for the exam **

Work with Red Hat OpenShift Container Platform
    Create and work with multiple OpenShift projects
    Implement application health monitoring

Work with container images
    Use command line utilities to manipulate container images
    Optimize container images

Troubleshoot application deployment issues
    Diagnose and correct minor issues with application deployment

Work with image streams
    Create custom image streams to deploy applications
    Pull applications from existing Git repositories
    Debug minor issues with application deployment

Work with configuration maps
    Create configuration maps
    Use configuration maps to inject data into applications

Work with the source-to-image (S2I) tool
https://github.com/openshift/source-to-image/blob/master/examples/nginx-centos7/README.md
https://github.com/openshift/source-to-image/blob/master/docs/builder_image.md
    * Deploy applications using S2I
    * Customize existing S2I builder images
    * Create own S2I builder images
        $s2i create <imageName> <destination>
        s2i will create the necessary files, ie s2i/bin/* and directories with default values that needs to be configured.
        Edit the Dockerfile that installs all of the necessary tools and libraries that are needed to build and run our application. 
        This file will also handle copying the s2i scripts into the created image.

S2I chapter 5 final lab
    * The S2I scripts for the builder image are provided in the /home/student/DO288/labs/custom-s2i/s2i/bin
    * Edit the Dockerfile for the builder image to include an instruction to copy the S2I scripts to the appropriate location in the builder image. Add this new instruction immediately following the TODO comment already present in the file.
        - steps 
            add COPY ./s2i/bin/ /usr/libexec/s2i to Dockerfile
    * Build the S2I builder image. Name the image s2i-do288-go.
        - steps
            Navigate to the directory where the Dockerfile which should be used for the builder image exists. THen build the builder image using podman.  
            $ sudo podman build -t (tag name) 
            $ sudo podman images
    * Build the Dockerfile for an application container image that should combine the S2I builder image and the application source code locally in the /home/student/DO288/labs/custom-s2i/test/test-app directory.
        - steps
            Create a directory where the s2i command can save the Dockerfile which should combine the s2i builder image and the source code.
            Use the s2i build command to produce a Dockerfile for the application container image:
            $ s2i build <source code> <builder-image> [<tag>]
            $ s2i build test/test-app/ \
            > s2i-do288-go s2i-go-app \
            > --as-dockerfile /home/student/s2i-go-app/Dockerfile
    * Verify and test the S2I builder 
        - steps
            Test the application container image locally on the workstation VM. Run the container with the -u flag to simulate running as a random user on an OpenShift cluster. You can copy the command or run it directly from the ~/DO288/labs/custom-s2i/local-test.sh script:
            $ sudo podman run --name go-test -u 1234 \
            > -p 8080:8080 -d <ApplicationImageName>
            $ curl http://localhost:8080/user1




Work with hooks and triggers
    Create a hook that runs a provided script
    Test and confirm proper operation of the hook


Work with templates
    Use pre-existing templates written in either JSON or YAML format
    Work with multicontainer templates
    Add a custom parameter to a template




-------------------------------------------------------
Delete all resources in current project
    $ oc delete all --selector app=nbviewe


*CHAPTER 3 DOCKERFILES*

Change the group ID and permissions of the folders where the web server process reads and writes files:
    RUN chgrp -R 0 /var/log/httpd /var/run/httpd && \
        chmod -R g=u /var/log/httpd /var/run/httpd

Add a USER instruction in Dockerfile for an unprivileged user. The Red Hat convention is to use userid 1001:
    USER 1001

*CHAPTER 4 Building Applications *

Set up/access a generic webhook on a build config. A trigger can be accessed from the $oc describe bc/name. The describe command will list avaiable webhooks. A webhook is called via an URL that contains the WebHookSecret. 
    oc describe bc/name --> http://<openshift_api_host:port>/oapi/v1/namespaces/<namespace>/buildconfigs/<name>/webhooks/<secret>/generic
    oc get bc/name -o yaml ----> get secret for the webhook and paste in the secret into <secret> in above URL
To invoke the webhook manually, the insecure -k flag is specified to ignore certificate validation.
    curl -X POST -k https://<openshift_api_host:port>/oapi/v1/namespaces/<namespace>/buildconfigs/<name>/webhooks/<secret>/generic



*CHAPTER 5 PUBLISHING IMAGES TO REGISTRIES & USING IMAGE STREAMS*

Login to quay.io using Podman in order to let podman access token/authentication.
    podman login quay.io

Push an OCI image in from a local directory
    Skopeo copy oci:Path/To/oci-image docker://quay.io/mille9393/nameOfImage:Tag

Verify that Podman can run images from the external registry. Podman needs to run as root for this to work, so login as sudo
    Sudo podman login quay.io
    Sudo podman run --name <name> \
    quay.io/username/image-name:1.0 

Verify that the container is running and check it logs
    sudo podman ps
    sudo podman logs <container-id>

OpenShift needs credentials in order to deploy the image from an external registry. Create a secret from the container registry API access token that was stored by Podman.    
    oc create secret generic quayio \
    --from-file .dockerconfigjson=run/user/1000/containers/auth.json \
    --type kubernetes.io/dockerconfigjson

Link secret quayio to OpenShifts default Service Account "default" in order to deploy the external image. 
    oc secrets link default quayio --for pull

import image and create image stream which points to the external image registry. Set the flags --confirm and --reference-policy=local so that other projects that use the image stream also can use the secret stored in the project where the secret was created. 
    oc import-image php-info --confirm \
    --reference-policy local \
    --from quay.io/user_name/image_name    

Deploy an application from the recently created image stream stored in another project. Grant access to the other project so that it can pull images from image streams from other projects.
    oc add policy system:image-puller -n <project_where_imagestream_is> system:serviceaccount:<project_to_deploy_from>


* Chapter 5 customizing s2i builds *

Customize scripts of an existing s2i builder by creating wrapper scripts that invokes the default scripts, and then adds the necessary customization before or after the invocation. 
To customize the S2I scripts for the rhscl/php-70-rhel7 S2I builder image, inspect the image to get the s2i builder scripts location, then create your own .s2i/bin/ scripts which points to the external scripts. 
    oc skopeo inspect docker://myregistry.example.com/rhscl/php-70-rhel7 -->> get the scripts from the base image       

Use the s2i create command to create the template files required to create a new S2I builder image:
    s2i create image_name directory

After you update the Dockerfile and S2I scripts as needed, you can build the builder image using the podman build command.
    sudo podman build -t builder_image .

When the builder image is ready, you can build an application container image using the s2i build command. This allows you to test the S2I builder image locally, without the need to push it to a registry server and deploy an application using the builder image to an OpenShift cluster:
    s2i build src-code builder_image tag_name

